1. What happens when you initialize a repository? Why do you need to do it?
Initialitizing a repository means you are including your files in the current folder into a git repository.
It enables you to use git for version control.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is an in-between for the working directory, on my hard drive, and the git repository, on which version controls are kept.
I'm actually not that sure why it's valuable. I guess because it gives you more flexibility about committing things separately.

3. How can you use the staging area to make sure you have one commit per logical change?
You can compare what's in staging area to last commit.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you want to try out a new scenario, such as an easier version of a game. Or a different way to approach analysis.
Branches help because you can work through glitches of your new approach, without changing the original way you did it.

5. How do the diagrams help you visualize the branch structure?
I understand how commits may be on different branches, and how the git log will show me a different log depending on branch. (I think)

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging branches allows changes made on separate branched versions of a document to be merged together into the master branch, so two people's work can be consolidated more seamlessly.
The diagram represents branches to show that commits could be made simultaneously, but on separate branches.
#Note - I have not successfully merged two different branches because I got a CONFLICT error, tried to run merge tools, but they didn't work.

7. What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Pros of automatic - it saves time, it's probably right because it uses good logic that doesn't jump to conclusions if two versions change the same lines of code.
Cons of automatic - it doesn't merge changes that you might think are obvious. OR it may make changes that are additions, but change the code fundamentally.
Pros of manual - you do precisely what you want every time
Cons of manual - it takes more time; you might be more prone to user error mistakes.